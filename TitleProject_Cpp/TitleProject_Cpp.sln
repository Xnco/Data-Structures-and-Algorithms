
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.28729.10
MinimumVisualStudioVersion = 10.0.40219.1
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "TitleProject_Cpp", "TitleProject_Cpp\TitleProject_Cpp.vcxproj", "{7F6D48B3-233D-479A-AD77-D78F3996DC83}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}"
	ProjectSection(SolutionItems) = preProject
		0000_No_Solution.cpp = 0000_No_Solution.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0001-0099", "0001-0099", "{88F51E2F-5784-4BAB-AB16-3D0C0D3C1506}"
	ProjectSection(SolutionItems) = preProject
		0019_删除链表的倒数第N个节点.cpp = 0019_删除链表的倒数第N个节点.cpp
		0022_括号生成.cpp = 0022_括号生成.cpp
		0024_两两交换链表中的节点.cpp = 0024_两两交换链表中的节点.cpp
		0027_移除元素.cpp = 0027_移除元素.cpp
		0033_搜索旋转排序数组.cpp = 0033_搜索旋转排序数组.cpp
		0039_组合总和.cpp = 0039_组合总和.cpp
		0054_螺旋矩阵.cpp = 0054_螺旋矩阵.cpp
		0064_最小路径和.cpp = 0064_最小路径和.cpp
		0066_加一.cpp = 0066_加一.cpp
		0067_二进制求和.cpp = 0067_二进制求和.cpp
		0081_搜索旋转排序数组_II.cpp = 0081_搜索旋转排序数组_II.cpp
		0082_删除排序链表中的重复元素 II.cpp = 0082_删除排序链表中的重复元素 II.cpp
		0083_删除排序链表中的重复元素.cpp = 0083_删除排序链表中的重复元素.cpp
		0086_分隔链表.cpp = 0086_分隔链表.cpp
		0092_反转链表 II.cpp = 0092_反转链表 II.cpp
		0095_不同的二叉搜索树 II.cpp = 0095_不同的二叉搜索树 II.cpp
		0096_不同的二叉搜索树.cpp = 0096_不同的二叉搜索树.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0100-0199", "0100-0199", "{DDEBA0FE-E993-4AB1-898C-29619EDB90A1}"
	ProjectSection(SolutionItems) = preProject
		0100_相同的树.cpp = 0100_相同的树.cpp
		0102_二叉树的层次遍历.cpp = 0102_二叉树的层次遍历.cpp
		0103_二叉树的锯齿形层次遍历.cpp = 0103_二叉树的锯齿形层次遍历.cpp
		0105_从前序和中序遍历序列构造二叉树.cpp = 0105_从前序和中序遍历序列构造二叉树.cpp
		0106_从中序与后序遍历序列构造二叉树.cpp = 0106_从中序与后序遍历序列构造二叉树.cpp
		0107_二叉树的层次遍历 II.cpp = 0107_二叉树的层次遍历 II.cpp
		0108_将有序数组转换为二叉搜索树.cpp = 0108_将有序数组转换为二叉搜索树.cpp
		0109_有序链表转换二叉搜索树.cpp = 0109_有序链表转换二叉搜索树.cpp
		0110_平衡二叉树.cpp = 0110_平衡二叉树.cpp
		0111_二叉树的最小深度.cpp = 0111_二叉树的最小深度.cpp
		0112_路径总和.cpp = 0112_路径总和.cpp
		0113_路径总和II.cpp = 0113_路径总和II.cpp
		0114_二叉树展开为链表.cpp = 0114_二叉树展开为链表.cpp
		0116_填充每个节点的下一个右侧节点指针.cpp = 0116_填充每个节点的下一个右侧节点指针.cpp
		0119_杨辉三角II.cpp = 0119_杨辉三角II.cpp
		0125_验证回文串.cpp = 0125_验证回文串.cpp
		0134_加油站.cpp = 0134_加油站.cpp
		0139_单词拆分.cpp = 0139_单词拆分.cpp
		0141_环形链表.cpp = 0141_环形链表.cpp
		0142_环形链表 II.cpp = 0142_环形链表 II.cpp
		0143_重排链表.cpp = 0143_重排链表.cpp
		0147_对链表进行插入排序.cpp = 0147_对链表进行插入排序.cpp
		0148_排序链表.cpp = 0148_排序链表.cpp
		0153_寻找旋转排序数组中的最小值.cpp = 0153_寻找旋转排序数组中的最小值.cpp
		0160_相交链表.cpp = 0160_相交链表.cpp
		0162_寻找峰值.cpp = 0162_寻找峰值.cpp
		0167_两数之和 II - 输入有序数组.cpp = 0167_两数之和 II - 输入有序数组.cpp
		0172_阶乘后的0.cpp = 0172_阶乘后的0.cpp
		0179_最大数.cpp = 0179_最大数.cpp
		0191_位1的个数.cpp = 0191_位1的个数.cpp
		0198_打家劫舍.cpp = 0198_打家劫舍.cpp
		0199_二叉树的右视图.cpp = 0199_二叉树的右视图.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0200-0299", "0200-0299", "{3728FBD0-F773-45BA-86C2-B16A2B700DF0}"
	ProjectSection(SolutionItems) = preProject
		0202_快乐数.cpp = 0202_快乐数.cpp
		0203_移除链表元素.cpp = 0203_移除链表元素.cpp
		0205_同构字符串.cpp = 0205_同构字符串.cpp
		0221_最大正方形.cpp = 0221_最大正方形.cpp
		0228_汇总区间.cpp = 0228_汇总区间.cpp
		0230_二叉搜索树中第K小的元素.cpp = 0230_二叉搜索树中第K小的元素.cpp
		0257_二叉树的所有路径.cpp = 0257_二叉树的所有路径.cpp
		0258_各位相加.cpp = 0258_各位相加.cpp
		0263_丑数.cpp = 0263_丑数.cpp
		0264_丑数 II.cpp = 0264_丑数 II.cpp
		0268_缺失数字.cpp = 0268_缺失数字.cpp
		0279_完全平方数.cpp = 0279_完全平方数.cpp
		0283_移动零.cpp = 0283_移动零.cpp
		0289_生命游戏.cpp = 0289_生命游戏.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0300-0399", "0300-0399", "{6198247D-60DE-446A-92FD-E269D232427F}"
	ProjectSection(SolutionItems) = preProject
		0300_最长上升子序列.cpp = 0300_最长上升子序列.cpp
		0328_奇偶链表.cpp = 0328_奇偶链表.cpp
		0338_比特位计数.cpp = 0338_比特位计数.cpp
		0349_两个数组的交集.cpp = 0349_两个数组的交集.cpp
		0367_有效的完全平方数.cpp = 0367_有效的完全平方数.cpp
		0386_字典序排数.cpp = 0386_字典序排数.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0400-0499", "0400-0499", "{FB82B8D5-D0C8-43E3-8E32-C2C251755ACB}"
	ProjectSection(SolutionItems) = preProject
		0404_左叶子之和.cpp = 0404_左叶子之和.cpp
		0412_FizzBuzz.cpp = 0412_FizzBuzz.cpp
		0413_等差数列划分.cpp = 0413_等差数列划分.cpp
		0415_字符串相加.cpp = 0415_字符串相加.cpp
		0427_建立四叉树.cpp = 0427_建立四叉树.cpp
		0437_路径总和 III.cpp = 0437_路径总和 III.cpp
		0442_数组中重复的数据.cpp = 0442_数组中重复的数据.cpp
		0445_两数相加 II.cpp = 0445_两数相加 II.cpp
		0447_回旋镖的数量.cpp = 0447_回旋镖的数量.cpp
		0448_找到所有数组中消失的数字.cpp = 0448_找到所有数组中消失的数字.cpp
		0449_序列化和反序列化二叉搜索树.cpp = 0449_序列化和反序列化二叉搜索树.cpp
		0451_根据字符出现频率排序.cpp = 0451_根据字符出现频率排序.cpp
		0455_分发饼干.cpp = 0455_分发饼干.cpp
		0463_岛屿的周长.cpp = 0463_岛屿的周长.cpp
		0485_最大连续1的个数.cpp = 0485_最大连续1的个数.cpp
		0495_提莫攻击.cpp = 0495_提莫攻击.cpp
		0496_下一个更大元素I.cpp = 0496_下一个更大元素I.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0500-0599", "0500-0599", "{CE1ED089-EE54-4678-B8AA-AC5674D980FA}"
	ProjectSection(SolutionItems) = preProject
		0504_七进制数.cpp = 0504_七进制数.cpp
		0506_相对名次.cpp = 0506_相对名次.cpp
		0507_完美数.cpp = 0507_完美数.cpp
		0508_出现次数最多的子树元素和.cpp = 0508_出现次数最多的子树元素和.cpp
		0509_斐波那契数.cpp = 0509_斐波那契数.cpp
		0513_找树左下角的值.cpp = 0513_找树左下角的值.cpp
		0520_检测大写字母.cpp = 0520_检测大写字母.cpp
		0530_二叉搜索树的最小绝对差.cpp = 0530_二叉搜索树的最小绝对差.cpp
		0539_最小时间差.cpp = 0539_最小时间差.cpp
		0547_朋友圈.cpp = 0547_朋友圈.cpp
		0553_最优除法.cpp = 0553_最优除法.cpp
		0565_数组嵌套.cpp = 0565_数组嵌套.cpp
		0572_另一个数的子树.cpp = 0572_另一个数的子树.cpp
		0575_分糖果.cpp = 0575_分糖果.cpp
		0589_N叉树的前序遍历.cpp = 0589_N叉树的前序遍历.cpp
		0590_N叉树的后序遍历.cpp = 0590_N叉树的后序遍历.cpp
		0598_范围求和 II.cpp = 0598_范围求和 II.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0600-0699", "0600-0699", "{E09CFBE9-66C2-45BC-8D59-D0543D2B0FCE}"
	ProjectSection(SolutionItems) = preProject
		0623_在二叉树中增加一行.cpp = 0623_在二叉树中增加一行.cpp
		0637_二叉树的层平均值.cpp = 0637_二叉树的层平均值.cpp
		0641_设计循环双端队列.cpp = 0641_设计循环双端队列.cpp
		0652_寻找重复的子树.cpp = 0652_寻找重复的子树.cpp
		0653_两数之和 IV - 输入 BST.cpp = 0653_两数之和 IV - 输入 BST.cpp
		0654_最大二叉树.cpp = 0654_最大二叉树.cpp
		0655_输出二叉树.cpp = 0655_输出二叉树.cpp
		0661_图片平滑器.cpp = 0661_图片平滑器.cpp
		0677_键值映射.cpp = 0677_键值映射.cpp
		0680_验证回文字符串 II.cpp = 0680_验证回文字符串 II.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0700-0799", "0700-0799", "{2A76C5EA-48AB-446B-BDFF-CBB888488F21}"
	ProjectSection(SolutionItems) = preProject
		0700_二叉搜索树中的搜索.cpp = 0700_二叉搜索树中的搜索.cpp
		0704_二叉查找.cpp = 0704_二叉查找.cpp
		0707_设计链表.cpp = 0707_设计链表.cpp
		0713_乘积小于K的子数组.cpp = 0713_乘积小于K的子数组.cpp
		0725_分割链表.cpp = 0725_分割链表.cpp
		0728_自除数.cpp = 0728_自除数.cpp
		0733_图像渲染.cpp = 0733_图像渲染.cpp
		0740_删除与获得点数.cpp = 0740_删除与获得点数.cpp
		0763_划分字母区间.cpp = 0763_划分字母区间.cpp
		0783_二叉搜索树结点最小距离.cpp = 0783_二叉搜索树结点最小距离.cpp
		0784_字母大小写全排列.cpp = 0784_字母大小写全排列.cpp
		0797_所有可能的路径.cpp = 0797_所有可能的路径.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0800-0899", "0800-0899", "{7723C83A-0066-4471-86B7-0DB7ECE8EEC8}"
	ProjectSection(SolutionItems) = preProject
		0814_二叉树剪枝.cpp = 0814_二叉树剪枝.cpp
		0817_链表组件.cpp = 0817_链表组件.cpp
		0821_字符的最短距离.cpp = 0821_字符的最短距离.cpp
		0845_数组中的最长山脉.cpp = 0845_数组中的最长山脉.cpp
		0858_镜面反射.cpp = 0858_镜面反射.cpp
		0860_柠檬水找零.cpp = 0860_柠檬水找零.cpp
		0872_叶子相似的树.cpp = 0872_叶子相似的树.cpp
		0876_链表中的中间节点.cpp = 0876_链表中的中间节点.cpp
		0881_救生艇.cpp = 0881_救生艇.cpp
		0896_单调数列.cpp = 0896_单调数列.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "0900-0999", "0900-0999", "{231F2CE3-702D-4CCC-BAF0-26CA559A05CC}"
	ProjectSection(SolutionItems) = preProject
		0912_排序数组.cpp = 0912_排序数组.cpp
		0917_仅仅反转字母.cpp = 0917_仅仅反转字母.cpp
		0932_漂亮数组.cpp = 0932_漂亮数组.cpp
		0941_有效的山脉数组.cpp = 0941_有效的山脉数组.cpp
		0951_翻转等价二叉树.cpp = 0951_翻转等价二叉树.cpp
		0961_重复N次的元素.cpp = 0961_重复N次的元素.cpp
		0965_单值二叉树.cpp = 0965_单值二叉树.cpp
		0983_最低票价.cpp = 0983_最低票价.cpp
		0991_坏了的计算器.cpp = 0991_坏了的计算器.cpp
		0993_二叉树的堂兄弟节点.cpp = 0993_二叉树的堂兄弟节点.cpp
		0997_找到小镇的法官.cpp = 0997_找到小镇的法官.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "1000-1099", "1000-1099", "{14696338-AB24-4B4A-9982-AE755BD06DDB}"
	ProjectSection(SolutionItems) = preProject
		1008_先序遍历构造二叉树.cpp = 1008_先序遍历构造二叉树.cpp
		1019_链表中的下一个更大节点.cpp = 1019_链表中的下一个更大节点.cpp
		1025_除数博弈.cpp = 1025_除数博弈.cpp
		1054_距离相等的条形码.cpp = 1054_距离相等的条形码.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "1100-1199", "1100-1199", "{D086A20F-85DB-416A-8AF1-9861D4821C21}"
	ProjectSection(SolutionItems) = preProject
		1103_分糖果II.cpp = 1103_分糖果II.cpp
		1137_第N个泰波那契数.cpp = 1137_第N个泰波那契数.cpp
		1190_反转每对括号间的子串.cpp = 1190_反转每对括号间的子串.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "1200-1299", "1200-1299", "{3EF5204A-5B8D-4C4E-A542-F57C2C26FD7D}"
	ProjectSection(SolutionItems) = preProject
		1275_找出井字棋的获胜者.cpp = 1275_找出井字棋的获胜者.cpp
		1277_统计全为1的正方形子矩阵.cpp = 1277_统计全为1的正方形子矩阵.cpp
	EndProjectSection
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Interview", "Interview", "{5D2B21DF-EC96-4E1E-BCEE-238A0BC0CEE5}"
	ProjectSection(SolutionItems) = preProject
		Interview_0051_数组中的逆序对.cpp = Interview_0051_数组中的逆序对.cpp
	EndProjectSection
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|x64 = Debug|x64
		Debug|x86 = Debug|x86
		Release|x64 = Release|x64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Debug|x64.ActiveCfg = Debug|x64
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Debug|x64.Build.0 = Debug|x64
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Debug|x86.ActiveCfg = Debug|Win32
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Debug|x86.Build.0 = Debug|Win32
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Release|x64.ActiveCfg = Release|x64
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Release|x64.Build.0 = Release|x64
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Release|x86.ActiveCfg = Release|Win32
		{7F6D48B3-233D-479A-AD77-D78F3996DC83}.Release|x86.Build.0 = Release|Win32
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{88F51E2F-5784-4BAB-AB16-3D0C0D3C1506} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{DDEBA0FE-E993-4AB1-898C-29619EDB90A1} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{3728FBD0-F773-45BA-86C2-B16A2B700DF0} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{6198247D-60DE-446A-92FD-E269D232427F} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{FB82B8D5-D0C8-43E3-8E32-C2C251755ACB} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{CE1ED089-EE54-4678-B8AA-AC5674D980FA} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{E09CFBE9-66C2-45BC-8D59-D0543D2B0FCE} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{2A76C5EA-48AB-446B-BDFF-CBB888488F21} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{7723C83A-0066-4471-86B7-0DB7ECE8EEC8} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{231F2CE3-702D-4CCC-BAF0-26CA559A05CC} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{14696338-AB24-4B4A-9982-AE755BD06DDB} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{D086A20F-85DB-416A-8AF1-9861D4821C21} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{3EF5204A-5B8D-4C4E-A542-F57C2C26FD7D} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
		{5D2B21DF-EC96-4E1E-BCEE-238A0BC0CEE5} = {97D93F96-CD89-4BBD-B5E8-BD6B22F00AFF}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {002C05AF-EFF7-4B8D-99D9-1038BF3394B5}
	EndGlobalSection
EndGlobal
